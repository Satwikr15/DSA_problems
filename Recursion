
//functional approach
// class Main {
//     public static int fact(int n){
//         if(n==1){
//             return 1;
//         }
//         return n*fact(n-1);
//     }
//     public static void main(String[] args) {
//       int n=5;
//       System.out.println(fact(n));
//     }
// }

//parameterized approach
class Main {
    public static int fact(int i, int m){
        if(i==1){
            return m;
        }
        m=m*i;
        return fact(i-1,m);
    }
    public static void main(String[] args) {
      int n=5;
      System.out.println(fact(n,1));
    }
}

#reverse a array
class Main {
    public static void Rev(int[] arr,int i,int j){
        if(i>=j){
            return;
        }
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        Rev(arr,i+1,j-1);
    }

    public static void main(String[] args) {
      int[] arr={1,2,3,4,5};
      int n=arr.length;
      Rev(arr,0,n-1);
      for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}

//Print all subsequences
import java.util.*;

public class Main {
    public static void func(int ind, List<Integer> sub, int[] arr, int n) {
        if (ind == n) {
            // print current subset
            for (int num : sub) {
                System.out.print(num + " ");
            }
            System.out.println();
            return;
        }

        // pick the current element
        sub.add(arr[ind]);
        func(ind + 1, sub, arr, n);

        // not pick (backtrack)
        sub.remove(sub.size() - 1);
        func(ind + 1, sub, arr, n);
    }

    public static void main(String[] args) {
        int[] arr = {3, 1, 2};
        List<Integer> sub = new ArrayList<>();
        int n = arr.length;
        func(0, sub, arr, n);
    }
}

